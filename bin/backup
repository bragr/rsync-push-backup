#!/bin/bash

. $HOME/.profile

function notify {
    DISPLAY=:0.0 XAUTHORITY=$HOME/.Xauthority notify-send "Backup" "$1"
}

function die {
    rm -f $HOME/.backup/lock
    notify "ERROR: $1"
    echo "ERROR: $1"
    exit 1
}

function rotate_snapshots {
  local interval=$1
  local snapshot_var=${interval}_snapshots
  local snapshots=${!snapshot_var}
  echo "Rotate $1"

  ssh $backup_host <<EOF
    cd $remote_path;
    [ -d $interval.$snapshots ] && rm -rf $interval.$snapshots;
    for i in {$snapshots..2}; do
      [ -d $interval.\$(( \$i - 1 )) ] && mv $interval.\$(( \$i - 1 )) $interval.\$i;
    done;
    if [ -h $interval.0 ]; then
      touch -h $interval.0
      cp -al \$(readlink $interval.0) $interval.1;
    else
      touch $interval.0
      cp -al $interval.0 $interval.1;
    fi;
EOF
}

function test_age() {
    local interval=$1
    local max_age=$2
    local snapshot_var=${interval}_snapshots
    local last_snapshot=${!snapshot_var}

    local mtime=$(ssh $backup_host \
	"stat -c '%Y' $remote_path/$interval.0")
    [ -z "$mtime" ] && return 1
    age=$(( $(date +%s) - $mtime ))
    echo "$interval age is $age / $max_age"
    test $age -gt $max_age
}

notify "Running backup"

if [ -e $HOME/.backup/lock ]; then
    notify "ERROR: Backup already running"
    echo "ERROR: Backup already running"
    exit 1
fi

touch $HOME/.backup/lock

[ ! -f $HOME/.backup/config ] && die "Config file must be in $HOME/.backup/config"

. $HOME/.backup/config

ssh $backup_host <<EOF
    mkdir -p $remote_path &&
    cd $remote_path &&
    ln -sf ./daily.$daily_snapshots ./weekly.0 &&
    ln -sf ./weekly.$weekly_snapshots ./monthly.0
EOF

[ $? == 0 ] || die "Failed creating target path"

rsync -azP \
    --delete \
    --delete-excluded \
    --exclude-from=$HOME/.backup/exclude \
    --link-dest=../daily.1 \
    $backup_root \
    $backup_host:$remote_path/daily.0;

[ $? == 0 ] || die "rsync failed"

rotate_snapshots daily
test_age weekly $(( 7*24*60*60 )) && rotate_snapshots weekly
test_age monthly $(( 30*7*24*60*60 )) && rotate_snapshots monthly

rm $HOME/.backup/lock

notify "Backup done"
